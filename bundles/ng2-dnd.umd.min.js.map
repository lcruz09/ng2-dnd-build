{"version":3,"file":"ng2-dnd.umd.min.js","sources":["~/ng2-dnd/src/dnd.utils.ts","~/ng2-dnd/src/dnd.service.ts","~/ng2-dnd/src/dnd.config.ts","~/ng2-dnd/src/abstract.component.ts","~/ng2-dnd/src/draggable.component.ts","~/ng2-dnd/src/droppable.component.ts","~/ng2-dnd/src/sortable.component.ts","~/ng2-dnd/src/dnd.module.ts"],"sourcesContent":["// Copyright (C) 2016-2018 Sergey Akopkokhyants\n// This project is licensed under the terms of the MIT license.\n// https://github.com/akserg/ng2-dnd\n\n/**\n * Check and return true if an object is type of string\n */\nexport function isString(obj:any) {\n    return typeof obj === \"string\";\n}\n\n/**\n * Check and return true if an object not undefined or null\n */\nexport function isPresent(obj: any) {\n    return obj !== undefined && obj !== null;\n}\n\n/**\n * Check and return true if an object is type of Function\n */\nexport function isFunction(obj: any) {\n    return typeof obj === \"function\";\n}\n\n/**\n * Create Image element with specified url string\n */\nexport function createImage(src: string) {\n    let img:HTMLImageElement = new HTMLImageElement();\n    img.src = src;\n    return img;\n}\n\n/**\n * Call the function\n */\nexport function callFun(fun: Function) {\n    return fun();\n}","// Copyright (C) 2016-2018 Sergey Akopkokhyants\n// This project is licensed under the terms of the MIT license.\n// https://github.com/akserg/ng2-dnd\n\nimport {Injectable, EventEmitter} from '@angular/core';\n\nimport {DragDropConfig} from './dnd.config';\nimport {isPresent} from './dnd.utils';\nimport {SortableContainer} from './sortable.component';\n\nexport class DragDropData {\n    dragData: any;\n    mouseEvent: MouseEvent;\n}\n\nexport function dragDropServiceFactory(): DragDropService  {\n    return new DragDropService();\n}\n\nexport class DragDropRevertData {\n    initialContainerRef: any;\n    finalContainerRef: any;\n    initialContainerItemsCopy: any;\n    finalContainerItemsCopy: any;\n}\n\n@Injectable()\nexport class DragDropService {\n    allowedDropZones: Array<string> = [];\n    onDragSuccessCallback: EventEmitter<DragDropData>;\n    dragData: any;\n    isDragged: boolean;\n}\n\nexport function dragDropSortableServiceFactory(config: DragDropConfig): DragDropSortableService  {\n    return new DragDropSortableService(config);\n}\n\n@Injectable()\nexport class DragDropSortableService {\n    index: number;\n    sortableContainer: SortableContainer;\n    isDragged: boolean;\n\n    revertData: DragDropRevertData;\n\n    private _elem: HTMLElement;\n    public get elem(): HTMLElement {\n        return this._elem;\n    }\n\n    constructor(private _config: DragDropConfig) {\n        this.revertData = new DragDropRevertData();\n    }\n\n    markSortable(elem: HTMLElement) {\n        if (isPresent(this._elem)) {\n            this._elem.classList.remove(this._config.onSortableDragClass);\n        }\n        if (isPresent(elem)) {\n            this._elem = elem;\n            this._elem.classList.add(this._config.onSortableDragClass);\n        }\n    }\n}\n","// Copyright (C) 2016-2018 Sergey Akopkokhyants\n// This project is licensed under the terms of the MIT license.\n// https://github.com/akserg/ng2-dnd\n\nimport {isString} from './dnd.utils';\n\nexport class DataTransferEffect {\n\n    static COPY = new DataTransferEffect('copy');\n    static LINK = new DataTransferEffect('link');\n    static MOVE = new DataTransferEffect('move');\n    static NONE = new DataTransferEffect('none');\n\n    constructor(public name: string) { }\n}\n\nexport class DragImage {\n    constructor(\n        public imageElement: any,\n        public x_offset: number = 0,\n        public y_offset: number = 0) {\n            if (isString(this.imageElement)) {\n                // Create real image from string source\n                let imgScr: string = <string>this.imageElement;\n                this.imageElement = new HTMLImageElement();\n                (<HTMLImageElement>this.imageElement).src = imgScr;\n            }\n        }\n}\n\nexport class DragDropConfig {\n    public onDragStartClass: string = \"dnd-drag-start\";\n    public onDragEnterClass: string = \"dnd-drag-enter\";\n    public onDragOverClass: string = \"dnd-drag-over\";\n    public onSortableDragClass: string = \"dnd-sortable-drag\";\n\n    public dragEffect: DataTransferEffect = DataTransferEffect.MOVE;\n    public dropEffect: DataTransferEffect = DataTransferEffect.MOVE;\n    public dragCursor: string = \"move\";\n    public dragImage: DragImage;\n    public defaultCursor: string = \"pointer\";\n}","// Copyright (C) 2016-2018 Sergey Akopkokhyants\n// This project is licensed under the terms of the MIT license.\n// https://github.com/akserg/ng2-dnd\n\nimport {Injectable, ChangeDetectorRef, ViewRef} from '@angular/core';\nimport {ElementRef} from '@angular/core';\n\nimport { DragDropConfig, DragImage } from './dnd.config';\nimport { DragDropService } from './dnd.service';\nimport { isString, isFunction, isPresent, createImage, callFun } from './dnd.utils';\n\n@Injectable()\nexport abstract class AbstractComponent {\n    _elem: HTMLElement;\n    _dragHandle: HTMLElement;\n    _dragHelper: HTMLElement;\n    _defaultCursor: string;\n\n    /**\n     * Last element that was mousedown'ed\n     */\n    _target: EventTarget;\n\n    /**\n     * Whether the object is draggable. Default is true.\n     */\n    private _dragEnabled: boolean = false;\n    set dragEnabled(enabled: boolean) {\n        this._dragEnabled = !!enabled;\n        this._elem.draggable = this._dragEnabled;\n    }\n    get dragEnabled(): boolean {\n        return this._dragEnabled;\n    }\n\n    /**\n     * Allows drop on this element\n     */\n    dropEnabled: boolean = false;\n    /**\n     * Drag effect\n     */\n    effectAllowed: string;\n    /**\n     * Drag cursor\n     */\n    effectCursor: string;\n\n    /**\n     * Restrict places where a draggable element can be dropped. Either one of\n     * these two mechanisms can be used:\n     *\n     * - dropZones: an array of strings that permits to specify the drop zones\n     *   associated with this component. By default, if the drop-zones attribute\n     *   is not specified, the droppable component accepts drop operations by\n     *   all the draggable components that do not specify the allowed-drop-zones\n     *\n     * - allowDrop: a boolean function for droppable components, that is checked\n     *   when an item is dragged. The function is passed the dragData of this\n     *   item.\n     *   - if it returns true, the item can be dropped in this component\n     *   - if it returns false, the item cannot be dropped here\n     */\n    allowDrop: (dropData: any) => boolean;\n    dropZones: string[] = [];\n\n    /**\n     * Here is the property dragImage you can use:\n     * - The string value as url to the image\n     *   <div class=\"panel panel-default\"\n     *        dnd-draggable [dragEnabled]=\"true\"\n     *        [dragImage]=\"/images/simpler.png\">\n     * ...\n     * - The DragImage value with Image and optional offset by x and y:\n     *   let myDragImage: DragImage = new DragImage(\"/images/simpler1.png\", 0, 0);\n     * ...\n     *   <div class=\"panel panel-default\"\n     *        dnd-draggable [dragEnabled]=\"true\"\n     *        [dragImage]=\"myDragImage\">\n     * ...\n     * - The custom function to return the value of dragImage programmatically:\n     *   <div class=\"panel panel-default\"\n     *        dnd-draggable [dragEnabled]=\"true\"\n     *        [dragImage]=\"getDragImage(someData)\">\n     * ...\n     *   getDragImage(value:any): string {\n     *     return value ? \"/images/simpler1.png\" : \"/images/simpler2.png\"\n     *   }\n     */\n    dragImage: string | DragImage | Function;\n\n    cloneItem: boolean = false;\n\n    constructor(elemRef: ElementRef, public _dragDropService: DragDropService, public _config: DragDropConfig,\n        private _cdr: ChangeDetectorRef) {\n\n        // Assign default cursor unless overridden\n        this._defaultCursor = _config.defaultCursor;\n        this._elem = elemRef.nativeElement;\n        this._elem.style.cursor = this._defaultCursor;  // set default cursor on our element\n        //\n        // DROP events\n        //\n        this._elem.ondragenter = (event: Event) => {\n            this._onDragEnter(event);\n        };\n        this._elem.ondragover = (event: DragEvent) => {\n            this._onDragOver(event);\n            //\n            if (event.dataTransfer != null) {\n                event.dataTransfer.dropEffect = this._config.dropEffect.name;\n            }\n\n            return false;\n        };\n        this._elem.ondragleave = (event: Event) => {\n            this._onDragLeave(event);\n        };\n        this._elem.ondrop = (event: Event) => {\n            this._onDrop(event);\n        };\n        //\n        // Drag events\n        //\n        this._elem.onmousedown = (event: MouseEvent) => {\n            this._target = event.target;\n        };\n        this._elem.ondragstart = (event: DragEvent) => {\n            if (this._dragHandle) {\n                if (!this._dragHandle.contains(<Element>this._target)) {\n                    event.preventDefault();\n                    return;\n                }\n            }\n\n            this._onDragStart(event);\n            //\n            if (event.dataTransfer != null) {\n                event.dataTransfer.setData('text', '');\n                // Change drag effect\n                event.dataTransfer.effectAllowed = this.effectAllowed || this._config.dragEffect.name;\n                // Change drag image\n                if (isPresent(this.dragImage)) {\n                    if (isString(this.dragImage)) {\n                        (<any>event.dataTransfer).setDragImage(createImage(<string>this.dragImage));\n                    } else if (isFunction(this.dragImage)) {\n                        (<any>event.dataTransfer).setDragImage(callFun(<Function>this.dragImage));\n                    } else {\n                        let img: DragImage = <DragImage>this.dragImage;\n                        (<any>event.dataTransfer).setDragImage(img.imageElement, img.x_offset, img.y_offset);\n                    }\n                } else if (isPresent(this._config.dragImage)) {\n                    let dragImage: DragImage = this._config.dragImage;\n                    (<any>event.dataTransfer).setDragImage(dragImage.imageElement, dragImage.x_offset, dragImage.y_offset);\n                } else if (this.cloneItem) {\n                    this._dragHelper = <HTMLElement>this._elem.cloneNode(true);\n                    this._dragHelper.classList.add('dnd-drag-item');\n                    this._dragHelper.style.position = \"absolute\";\n                    this._dragHelper.style.top = \"0px\";\n                    this._dragHelper.style.left = \"-1000px\";\n                    this._elem.parentElement.appendChild(this._dragHelper);\n                    (<any>event.dataTransfer).setDragImage(this._dragHelper, event.offsetX, event.offsetY);\n                }\n\n                // Change drag cursor\n                let cursorelem = (this._dragHandle) ? this._dragHandle : this._elem;\n\n                if (this._dragEnabled) {\n                    cursorelem.style.cursor = this.effectCursor ? this.effectCursor : this._config.dragCursor;\n                } else {\n                    cursorelem.style.cursor = this._defaultCursor;\n                }\n            }\n        };\n\n        this._elem.ondragend = (event: Event) => {\n            if (this._elem.parentElement && this._dragHelper) {\n                this._elem.parentElement.removeChild(this._dragHelper);\n            }\n            // console.log('ondragend', event.target);\n            this._onDragEnd(event);\n            // Restore style of dragged element\n            let cursorelem = (this._dragHandle) ? this._dragHandle : this._elem;\n            cursorelem.style.cursor = this._defaultCursor;\n        };\n    }\n\n    public setDragHandle(elem: HTMLElement) {\n        this._dragHandle = elem;\n    }\n    /******* Change detection ******/\n\n    detectChanges () {\n        // Programmatically run change detection to fix issue in Safari\n        setTimeout(() => {\n            if ( this._cdr && !(this._cdr as ViewRef).destroyed ) {\n                this._cdr.detectChanges();\n            }\n        }, 250);\n    }\n\n    //****** Droppable *******//\n    private _onDragEnter(event: Event): void {\n        // console.log('ondragenter._isDropAllowed', this._isDropAllowed);\n        if (this._isDropAllowed(event)) {\n            // event.preventDefault();\n            this._onDragEnterCallback(event);\n        }\n    }\n\n    private _onDragOver(event: Event) {\n        // // console.log('ondragover._isDropAllowed', this._isDropAllowed);\n        if (this._isDropAllowed(event)) {\n            // The element is over the same source element - do nothing\n            if (event.preventDefault) {\n                // Necessary. Allows us to drop.\n                event.preventDefault();\n            }\n\n            this._onDragOverCallback(event);\n        }\n    }\n\n    private _onDragLeave(event: Event): void {\n        // console.log('ondragleave._isDropAllowed', this._isDropAllowed);\n        if (this._isDropAllowed(event)) {\n            // event.preventDefault();\n            this._onDragLeaveCallback(event);\n        }\n    }\n\n    private _onDrop(event: Event): void {\n        // console.log('ondrop._isDropAllowed', this._isDropAllowed);\n        if (this._isDropAllowed(event)) {\n            // Necessary. Allows us to drop.\n            this._preventAndStop(event);\n\n            this._onDropCallback(event);\n\n            this.detectChanges();\n        }\n    }\n\n    private _isDropAllowed(event: any): boolean {\n        if ((this._dragDropService.isDragged || (event.dataTransfer && event.dataTransfer.files)) && this.dropEnabled) {\n            // First, if `allowDrop` is set, call it to determine whether the\n            // dragged element can be dropped here.\n            if (this.allowDrop) {\n                return this.allowDrop(this._dragDropService.dragData);\n            }\n\n            // Otherwise, use dropZones if they are set.\n            if (this.dropZones.length === 0 && this._dragDropService.allowedDropZones.length === 0) {\n                return true;\n            }\n            for (let i: number = 0; i < this._dragDropService.allowedDropZones.length; i++) {\n                let dragZone: string = this._dragDropService.allowedDropZones[i];\n                if (this.dropZones.indexOf(dragZone) !== -1) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    private _preventAndStop(event: Event): any {\n        if (event.preventDefault) {\n            event.preventDefault();\n        }\n        if (event.stopPropagation) {\n            event.stopPropagation();\n        }\n    }\n\n    //*********** Draggable **********//\n\n    private _onDragStart(event: Event): void {\n        //console.log('ondragstart.dragEnabled', this._dragEnabled);\n        if (this._dragEnabled) {\n            this._dragDropService.allowedDropZones = this.dropZones;\n            // console.log('ondragstart.allowedDropZones', this._dragDropService.allowedDropZones);\n            this._onDragStartCallback(event);\n        }\n    }\n\n    private _onDragEnd(event: Event): void {\n        this._dragDropService.allowedDropZones = [];\n        // console.log('ondragend.allowedDropZones', this._dragDropService.allowedDropZones);\n        this._onDragEndCallback(event);\n    }\n\n    //**** Drop Callbacks ****//\n    _onDragEnterCallback(event: Event) { }\n    _onDragOverCallback(event: Event) { }\n    _onDragLeaveCallback(event: Event) { }\n    _onDropCallback(event: Event) { }\n\n    //**** Drag Callbacks ****//\n    _onDragStartCallback(event: Event) { }\n    _onDragEndCallback(event: Event) { }\n}\n\nexport class AbstractHandleComponent {\n    _elem: HTMLElement;\n    constructor(elemRef: ElementRef, public _dragDropService: DragDropService, public _config: DragDropConfig,\n        private _Component: AbstractComponent, private _cdr: ChangeDetectorRef) {\n        this._elem = elemRef.nativeElement;\n        this._Component.setDragHandle(this._elem);\n    }\n}\n","// Copyright (C) 2016-2018 Sergey Akopkokhyants\n// This project is licensed under the terms of the MIT license.\n// https://github.com/akserg/ng2-dnd\n\nimport {ChangeDetectorRef} from '@angular/core';\nimport {Directive, Input, Output, EventEmitter, ElementRef} from '@angular/core';\n\nimport {AbstractComponent, AbstractHandleComponent} from './abstract.component';\nimport {DragDropConfig, DragImage} from './dnd.config';\nimport {DragDropService, DragDropData} from './dnd.service';\n\n@Directive({ selector: '[dnd-draggable]' })\nexport class DraggableComponent extends AbstractComponent {\n\n    @Input(\"dragEnabled\") set draggable(value:boolean) {\n        this.dragEnabled = !!value;\n    }\n\n    /**\n     * Callback function called when the drag actions happened.\n     */\n    @Output() onDragStart: EventEmitter<DragDropData> = new EventEmitter<DragDropData>();\n    @Output() onDragEnd: EventEmitter<DragDropData> = new EventEmitter<DragDropData>();\n\n    /**\n     * The data that has to be dragged. It can be any JS object\n     */\n    @Input() dragData: any;\n\n    /**\n     * Callback function called when the drag action ends with a valid drop action.\n     * It is activated after the on-drop-success callback\n     */\n    @Output(\"onDragSuccess\") onDragSuccessCallback: EventEmitter<any> = new EventEmitter<any>();\n\n    @Input(\"dropZones\") set dropzones(value:Array<string>) {\n        this.dropZones = value;\n    }\n\n    /**\n     * Drag allowed effect\n     */\n    @Input(\"effectAllowed\") set effectallowed(value: string) {\n        this.effectAllowed = value;\n    }\n\n    /**\n     * Drag effect cursor\n     */\n    @Input(\"effectCursor\") set effectcursor(value: string) {\n        this.effectCursor = value;\n    }\n\n    /**\n     * Here is the property dragImage you can use:\n     * - The string value as url to the image\n     *   <div class=\"panel panel-default\"\n     *        dnd-draggable [dragEnabled]=\"true\"\n     *        [dragImage]=\"/images/simpler.png\">\n     * ...\n     * - The DragImage value with Image and offset by x and y:\n     *   let myDragImage: DragImage = new DragImage(\"/images/simpler1.png\", 0, 0);\n     * ...\n     *   <div class=\"panel panel-default\"\n     *        dnd-draggable [dragEnabled]=\"true\"\n     *        [dragImage]=\"myDragImage\">\n     * ...\n     * - The custom function to return the value of dragImage programmatically:\n     *   <div class=\"panel panel-default\"\n     *        dnd-draggable [dragEnabled]=\"true\"\n     *        [dragImage]=\"getDragImage(someData)\">\n     * ...\n     *   getDragImage(value:any): string {\n     *     return value ? \"/images/simpler1.png\" : \"/images/simpler2.png\"\n     *   }\n     */\n    @Input() dragImage: string | DragImage | Function;\n\n    \n    @Input() cloneItem: boolean;\n\n    constructor(elemRef: ElementRef, dragDropService: DragDropService, config:DragDropConfig,\n        cdr:ChangeDetectorRef) {\n\n        super(elemRef, dragDropService, config, cdr);\n        this._defaultCursor = this._elem.style.cursor;\n        this.dragEnabled = true;\n    }\n\n    _onDragStartCallback(event: MouseEvent) {\n        this._dragDropService.isDragged = true;\n        this._dragDropService.dragData = this.dragData;\n        this._dragDropService.onDragSuccessCallback = this.onDragSuccessCallback;\n        this._elem.classList.add(this._config.onDragStartClass);\n        //\n        this.onDragStart.emit({dragData: this.dragData, mouseEvent: event});\n    }\n\n    _onDragEndCallback(event: MouseEvent) {\n        this._dragDropService.isDragged = false;\n        this._dragDropService.dragData = null;\n        this._dragDropService.onDragSuccessCallback = null;\n        this._elem.classList.remove(this._config.onDragStartClass);\n        //\n        this.onDragEnd.emit({dragData: this.dragData, mouseEvent: event});\n    }\n}\n\n\n@Directive({ selector: '[dnd-draggable-handle]' })\nexport class DraggableHandleComponent extends AbstractHandleComponent {\n    constructor(elemRef: ElementRef, dragDropService: DragDropService, config:DragDropConfig, _Component: DraggableComponent,\n        cdr:ChangeDetectorRef) {\n\n        super(elemRef, dragDropService, config, _Component, cdr);\n    }\n}\n","// Copyright (C) 2016-2018 Sergey Akopkokhyants\n// This project is licensed under the terms of the MIT license.\n// https://github.com/akserg/ng2-dnd\n\nimport {ChangeDetectorRef} from '@angular/core';\nimport {Directive, Input, Output, EventEmitter, ElementRef} from '@angular/core';\n\nimport {AbstractComponent} from './abstract.component';\nimport {DragDropConfig} from './dnd.config';\nimport {DragDropService, DragDropData} from './dnd.service';\n\n@Directive({ selector: '[dnd-droppable]' })\nexport class DroppableComponent extends AbstractComponent {\n\n    @Input(\"dropEnabled\") set droppable(value:boolean) {\n        this.dropEnabled = !!value;\n    }\n\n    /**\n     * Callback function called when the drop action completes correctly.\n     * It is activated before the on-drag-success callback.\n     */\n    @Output() onDropSuccess: EventEmitter<DragDropData> = new EventEmitter<DragDropData>();\n    @Output() onDragEnter: EventEmitter<DragDropData> = new EventEmitter<DragDropData>();\n    @Output() onDragOver: EventEmitter<DragDropData> = new EventEmitter<DragDropData>();\n    @Output() onDragLeave: EventEmitter<DragDropData> = new EventEmitter<DragDropData>();\n\n    @Input(\"allowDrop\") set allowdrop(value: (dropData: any) => boolean) {\n        this.allowDrop = value;\n    }\n\n    @Input(\"dropZones\") set dropzones(value:Array<string>) {\n        this.dropZones = value;\n    }\n\n    /**\n     * Drag allowed effect\n     */\n    @Input(\"effectAllowed\") set effectallowed(value: string) {\n        this.effectAllowed = value;\n    }\n\n    /**\n     * Drag effect cursor\n     */\n    @Input(\"effectCursor\") set effectcursor(value: string) {\n        this.effectCursor = value;\n    }\n\n    constructor(elemRef: ElementRef, dragDropService: DragDropService, config:DragDropConfig,\n        cdr:ChangeDetectorRef) {\n\n        super(elemRef, dragDropService, config, cdr);\n\n        this.dropEnabled = true;\n    }\n\n    _onDragEnterCallback(event: MouseEvent) {\n        if (this._dragDropService.isDragged) {\n            this._elem.classList.add(this._config.onDragEnterClass);\n            this.onDragEnter.emit({dragData: this._dragDropService.dragData, mouseEvent: event});\n        }\n    }\n\n    _onDragOverCallback (event: MouseEvent) {\n        if (this._dragDropService.isDragged) {\n            this._elem.classList.add(this._config.onDragOverClass);\n            this.onDragOver.emit({dragData: this._dragDropService.dragData, mouseEvent: event});\n        }\n    };\n\n    _onDragLeaveCallback (event: MouseEvent) {\n        if (this._dragDropService.isDragged) {\n            this._elem.classList.remove(this._config.onDragOverClass);\n            this._elem.classList.remove(this._config.onDragEnterClass);\n            this.onDragLeave.emit({dragData: this._dragDropService.dragData, mouseEvent: event});\n        }\n    };\n\n    _onDropCallback (event: MouseEvent) {\n        let dataTransfer = (event as any).dataTransfer;\n        if (this._dragDropService.isDragged || (dataTransfer && dataTransfer.files)) {\n            this.onDropSuccess.emit({dragData: this._dragDropService.dragData, mouseEvent: event});\n            if (this._dragDropService.onDragSuccessCallback) {\n                this._dragDropService.onDragSuccessCallback.emit({dragData: this._dragDropService.dragData, mouseEvent: event});\n            }\n            this._elem.classList.remove(this._config.onDragOverClass);\n            this._elem.classList.remove(this._config.onDragEnterClass);\n        }\n    }\n}\n","// Copyright (C) 2016-2018 Sergey Akopkokhyants\n// This project is licensed under the terms of the MIT license.\n// https://github.com/akserg/ng2-dnd\n\nimport {ChangeDetectorRef} from '@angular/core';\nimport {Directive, Input, Output, EventEmitter, ElementRef} from '@angular/core';\nimport {FormArray} from '@angular/forms';\n\nimport {AbstractComponent, AbstractHandleComponent} from './abstract.component';\nimport {DragDropConfig} from './dnd.config';\nimport {DragDropService, DragDropSortableService} from './dnd.service';\nimport { DragDropRevertData } from './dnd.module';\n\n@Directive({ selector: '[dnd-sortable-container]' })\nexport class SortableContainer extends AbstractComponent {\n\n    @Input('dragEnabled') set draggable(value: boolean) {\n        this.dragEnabled = !!value;\n    }\n\n    @Input()\n    set sortableData(sortableData: Array<any>|FormArray) {\n        this._sortableData = sortableData;\n        if (sortableData instanceof FormArray) {\n            this.sortableHandler = new SortableFormArrayHandler();\n        } else {\n            this.sortableHandler = new SortableArrayHandler();\n        }\n        //\n        this.dropEnabled = !!this._sortableData;\n        // console.log(\"collection is changed, drop enabled: \" + this.dropEnabled);\n    }\n    get sortableData(): Array<any>|FormArray {\n        return this._sortableData;\n    }\n\n    @Input('dropZones') set dropzones(value: Array<string>) {\n        this.dropZones = value;\n    }\n\n    @Input() keepOnDrop = false;\n    @Input() enableDrop =  true;\n    @Input() maxContainerSize = -1;\n    @Output('onItemAdded') onItemAddedCallback: EventEmitter<any> = new EventEmitter<any>();\n\n    private _sortableData: Array<any>|FormArray = [];\n    private sortableHandler: SortableFormArrayHandler|SortableArrayHandler;\n\n    public isHoverValid(sortableSource: SortableContainer): boolean {\n        if (this.maxContainerSize !== -1 && sortableSource !== this) {\n            return this.sortableData.length < this.maxContainerSize;\n        }\n        return true;\n    }\n\n    constructor(elemRef: ElementRef, dragDropService: DragDropService, config: DragDropConfig, cdr: ChangeDetectorRef,\n        private _sortableDataService: DragDropSortableService) {\n\n        super(elemRef, dragDropService, config, cdr);\n        this.dragEnabled = false;\n    }\n\n    _onDragEnterCallback(event: Event) {\n\n        if (this._sortableDataService.isDragged && this.enableDrop) {\n            const item: any = this._sortableDataService.sortableContainer.getItemAt(this._sortableDataService.index);\n            // Check does element exist in sortableData of this Container\n            if (this.indexOf(item) === -1) {\n\n                if (this.isHoverValid(this._sortableDataService.sortableContainer)) {\n\n                    // REVERT: Store container state to revert changes if necessary\n                    if (this._sortableDataService.revertData.finalContainerRef !== this) {\n                        this._sortableDataService.revertData.finalContainerRef = this;\n                        this._sortableDataService.revertData.finalContainerItemsCopy =\n                        Object.assign([], this._sortableDataService.revertData.finalContainerRef.sortableData);\n                    }\n\n                    // Let's add it\n                    // Remove item from previouse list only if keepOnDrop param and its same container\n                    if (!this._sortableDataService.sortableContainer.keepOnDrop) {\n                        this._sortableDataService.sortableContainer.removeItemAt(this._sortableDataService.index);\n                        if (this._sortableDataService.sortableContainer._sortableData.length === 0) {\n                            this._sortableDataService.sortableContainer.dropEnabled = true;\n                        }\n                    } else {\n                        if (this._sortableDataService.sortableContainer === this) {\n                            this._sortableDataService.sortableContainer.removeItemAt(this._sortableDataService.index);\n                            if (this._sortableDataService.sortableContainer._sortableData.length === 0) {\n                                this._sortableDataService.sortableContainer.dropEnabled = true;\n                            }\n                        }\n                    }\n\n                    // Add item to new list\n                    this.insertItemAt(item, 0);\n                    this._sortableDataService.sortableContainer = this;\n                    this._sortableDataService.index = 0;\n                    this.onItemAddedCallback.emit(item);\n                }\n\n            }\n            // Refresh changes in properties of container component\n            this.detectChanges();\n        }\n    }\n\n    getItemAt(index: number): any {\n        return this.sortableHandler.getItemAt(this._sortableData, index);\n    }\n\n    indexOf(item: any): number {\n        return this.sortableHandler.indexOf(this._sortableData, item);\n    }\n\n    removeItemAt(index: number): void {\n        this.sortableHandler.removeItemAt(this._sortableData, index);\n    }\n\n    insertItemAt(item: any, index: number) {\n        this.sortableHandler.insertItemAt(this._sortableData, item, index);\n    }\n\n    replaceItems(replaceItems: any): void {\n        this.sortableHandler.replaceItems(this._sortableData, replaceItems);\n    }\n}\n\nclass SortableArrayHandler {\n    getItemAt(sortableData: any, index: number): any {\n        return sortableData[index];\n    }\n\n    indexOf(sortableData: any, item: any): number {\n        return sortableData.indexOf(item);\n    }\n\n    removeItemAt(sortableData: any, index: number) {\n        sortableData.splice(index, 1);\n    }\n\n    insertItemAt(sortableData: any, item: any, index: number) {\n        sortableData.splice(index, 0, item);\n    }\n\n    replaceItems(sortableData: any, replaceItems: any): void {\n        // Empty the list\n        sortableData.splice(0, sortableData.length);\n        // Insert new Items\n        for (let itemIndex = 0; itemIndex < replaceItems.length; itemIndex++) {\n            const item = replaceItems[itemIndex];\n            this.insertItemAt(sortableData, item, itemIndex);\n        }\n    }\n}\n\nclass SortableFormArrayHandler {\n    getItemAt(sortableData: any, index: number): any {\n        return sortableData.at(index);\n    }\n\n    indexOf(sortableData: any, item: any): number {\n        return sortableData.controls.indexOf(item);\n    }\n\n    removeItemAt(sortableData: any, index: number) {\n        sortableData.removeAt(index);\n    }\n\n    insertItemAt(sortableData: any, item: any, index: number) {\n        sortableData.insert(index, item);\n    }\n\n    replaceItems(sortableData: any, replaceItems: any): void {\n        // Empty the list\n        sortableData.splice(0, sortableData.length);\n        // Insert new Items\n        for (let itemIndex = 0; itemIndex < replaceItems.length; itemIndex++) {\n            const item = replaceItems[itemIndex];\n            this.insertItemAt(sortableData, item, itemIndex);\n        }\n    }\n}\n\n@Directive({ selector: '[dnd-sortable]' })\nexport class SortableComponent extends AbstractComponent {\n\n    dragEnabled = true;\n\n    @Input('sortableIndex') index: number;\n\n    @Input('dragEnabled') set draggable(value: boolean) {\n        this.dragEnabled = !!value;\n    }\n\n    @Input('dropEnabled') set droppable(value: boolean) {\n        this.dropEnabled = !!value;\n    }\n\n    /**\n     * The data that has to be dragged. It can be any JS object\n     */\n    @Input() dragData: any;\n\n    /**\n     * Drag allowed effect\n     */\n    @Input('effectAllowed') set effectallowed(value: string) {\n        this.effectAllowed = value;\n    }\n\n    /**\n     * Drag effect cursor\n     */\n    @Input('effectCursor') set effectcursor(value: string) {\n        this.effectCursor = value;\n    }\n\n    /**\n     * Callback function called when the drag action ends with a valid drop action.\n     * It is activated after the on-drop-success callback\n     */\n    @Output(\"onDragSuccess\") onDragSuccessCallback: EventEmitter<any> = new EventEmitter<any>();\n    @Output(\"onDragStart\") onDragStartCallback: EventEmitter<any> = new EventEmitter<any>();\n    @Output(\"onDragOver\") onDragOverCallback: EventEmitter<any> = new EventEmitter<any>();\n    @Output(\"onDragEnd\") onDragEndCallback: EventEmitter<any> = new EventEmitter<any>();\n    @Output(\"onDropSuccess\") onDropSuccessCallback: EventEmitter<any> = new EventEmitter<any>();\n\n    constructor(elemRef: ElementRef, dragDropService: DragDropService, config: DragDropConfig,\n        private _sortableContainer: SortableContainer,\n        private _sortableDataService: DragDropSortableService,\n        cdr: ChangeDetectorRef) {\n        super(elemRef, dragDropService, config, cdr);\n        this.dropZones = this._sortableContainer.dropZones;\n        this.dropEnabled = true;\n    }\n\n    _onDragStartCallback(event: Event) {\n        // console.log('_onDragStartCallback. dragging elem with index ' + this.index);\n        this._sortableDataService.isDragged = true;\n        this._sortableDataService.sortableContainer = this._sortableContainer;\n        this._sortableDataService.index = this.index;\n        this._sortableDataService.markSortable(this._elem);\n        // Add dragData\n        this._dragDropService.isDragged = true;\n        this._dragDropService.dragData = this.dragData;\n        this._dragDropService.onDragSuccessCallback = this.onDragSuccessCallback;\n        //\n        this.onDragStartCallback.emit(this._dragDropService.dragData);\n\n        // REVERT: Generate a copy of the list in case drag end unsuccess\n        this._sortableDataService.revertData.initialContainerRef = this._sortableDataService.sortableContainer;\n        this._sortableDataService.revertData.initialContainerItemsCopy =\n         Object.assign([], this._sortableDataService.revertData.initialContainerRef.sortableData);\n    }\n\n    _onDragOverCallback(event: Event) {\n        if (this._sortableDataService.isDragged && this._elem !== this._sortableDataService.elem) {\n            // console.log('_onDragOverCallback. dragging elem with index ' + this.index);\n            this._sortableDataService.sortableContainer = this._sortableContainer;\n            this._sortableDataService.index = this.index;\n            this._sortableDataService.markSortable(this._elem);\n            this.onDragOverCallback.emit(this._dragDropService.dragData);\n        }\n    }\n\n    _onDragEndCallback(event: Event) {\n        this._sortableDataService.isDragged = false;\n        this._sortableDataService.sortableContainer = null;\n        this._sortableDataService.index = null;\n        this._sortableDataService.markSortable(null);\n\n        // Add dragGata\n        this._dragDropService.isDragged = false;\n        this._dragDropService.dragData = null;\n        this._dragDropService.onDragSuccessCallback = null;\n\n        // Emit Drop end event\n        this.onDragEndCallback.emit(this._dragDropService.dragData);\n\n        // REVERT: Revert all the changes if not container references\n        if (this._sortableDataService.revertData.initialContainerRef &&\n            this._sortableDataService.revertData.finalContainerRef) {\n            this.resetChanges();\n        }\n    }\n\n    /**\n     * Handles the revert functionality for the containers on drop unsuccess\n     */\n    resetChanges(): void {\n        this._sortableDataService.revertData.initialContainerRef.replaceItems(\n            this._sortableDataService.revertData.initialContainerItemsCopy\n        );\n\n        this._sortableDataService.revertData.finalContainerRef.replaceItems(\n            this._sortableDataService.revertData.finalContainerItemsCopy\n        );\n        this._sortableDataService.revertData = new DragDropRevertData();\n        this.detectChanges();\n    }\n\n    _onDragEnterCallback(event: Event) {\n        if (this._sortableContainer.enableDrop && this._sortableDataService.isDragged) {\n            this._sortableDataService.markSortable(this._elem);\n            if ((this.index !== this._sortableDataService.index) ||\n                (this._sortableDataService.sortableContainer.sortableData !== this._sortableContainer.sortableData)) {\n\n                if (this._sortableContainer.isHoverValid(this._sortableDataService.sortableContainer)) {\n\n                    // REVERT: Store container state to revert changes if necessary\n                    if (this._sortableDataService.revertData.finalContainerRef !== this._sortableContainer) {\n                        this._sortableDataService.revertData.finalContainerRef = this._sortableContainer;\n                        this._sortableDataService.revertData.finalContainerItemsCopy =\n                        Object.assign([], this._sortableDataService.revertData.finalContainerRef.sortableData);\n                    }\n\n                    // Get item\n                    const item: any = this._sortableDataService.sortableContainer.getItemAt(this._sortableDataService.index);\n\n                    // Remove item from previous list\n                    if (!this._sortableDataService.sortableContainer.keepOnDrop) {\n                        this._sortableDataService.sortableContainer.removeItemAt(this._sortableDataService.index);\n                        if (this._sortableDataService.sortableContainer.sortableData.length === 0) {\n                            this._sortableDataService.sortableContainer.dropEnabled = true;\n                        }\n                    } else  {\n                        // Remove only if same container\n                        if (this._sortableDataService.sortableContainer === this._sortableContainer) {\n                            this._sortableDataService.sortableContainer.removeItemAt(this._sortableDataService.index);\n                            if (this._sortableDataService.sortableContainer.sortableData.length === 0) {\n                                this._sortableDataService.sortableContainer.dropEnabled = true;\n                            }\n                        }\n                    }\n\n                    // Add item to new list\n                    this._sortableContainer.insertItemAt(item, this.index);\n                    if (this._sortableContainer.dropEnabled) {\n                        this._sortableContainer.dropEnabled = false;\n                    }\n\n                    // Emit Item Added Event\n                    this._sortableContainer.onItemAddedCallback.emit(item);\n\n                    this._sortableDataService.sortableContainer = this._sortableContainer;\n                    this._sortableDataService.index = this.index;\n                    this.detectChanges();\n                }\n            }\n        }\n    }\n\n    _onDropCallback (event: Event) {\n        if (this._sortableDataService.isDragged) {\n            if (this._sortableContainer.isHoverValid(this._sortableDataService.sortableContainer)) {\n                // REVERT: Reset revert data since drop was success\n                this._sortableDataService.revertData = new DragDropRevertData();\n\n                this.onDropSuccessCallback.emit(this._dragDropService.dragData);\n                if (this._dragDropService.onDragSuccessCallback) {\n                    this._dragDropService.onDragSuccessCallback.emit(this._dragDropService.dragData);\n                }\n                // Refresh changes in properties of container component\n                this._sortableContainer.detectChanges();\n            }\n        }\n    }\n}\n\n@Directive({ selector: '[dnd-sortable-handle]' })\nexport class SortableHandleComponent extends AbstractHandleComponent {\n    constructor(elemRef: ElementRef, dragDropService: DragDropService, config:DragDropConfig, _Component: SortableComponent,\n        cdr: ChangeDetectorRef) {\n\n        super(elemRef, dragDropService, config, _Component, cdr);\n    }\n}\n","// Copyright (C) 2016-2018 Sergey Akopkokhyants\n// This project is licensed under the terms of the MIT license.\n// https://github.com/akserg/ng2-dnd\n\nimport { NgModule, ModuleWithProviders } from \"@angular/core\";\n\nimport {DragDropConfig} from './dnd.config';\nimport {DragDropService, DragDropSortableService, dragDropServiceFactory, dragDropSortableServiceFactory} from './dnd.service';\nimport {DraggableComponent, DraggableHandleComponent} from './draggable.component';\nimport {DroppableComponent} from './droppable.component';\nimport {SortableContainer, SortableComponent, SortableHandleComponent} from './sortable.component';\n\nexport * from './abstract.component';\nexport * from './dnd.config';\nexport * from './dnd.service';\nexport * from './draggable.component';\nexport * from './droppable.component';\nexport * from './sortable.component';\n\nexport let providers = [\n    DragDropConfig,\n    { provide: DragDropService, useFactory: dragDropServiceFactory },\n    { provide: DragDropSortableService, useFactory: dragDropSortableServiceFactory, deps: [DragDropConfig] }\n];\n\n@NgModule({\n  declarations: [DraggableComponent, DraggableHandleComponent, DroppableComponent, SortableContainer, SortableComponent, SortableHandleComponent],\n  exports : [DraggableComponent, DraggableHandleComponent, DroppableComponent, SortableContainer, SortableComponent, SortableHandleComponent],\n\n})\nexport class DndModule {\n  static forRoot(): ModuleWithProviders {\n        return {\n            ngModule: DndModule,\n            providers: providers\n        };\n    }\n}\n"],"names":["isString","obj","isPresent","undefined","dragDropServiceFactory","DragDropService","dragDropSortableServiceFactory","config","DragDropSortableService","DataTransferEffect","name","this","COPY","LINK","MOVE","NONE","DragImage","imageElement","x_offset","y_offset","imgScr","HTMLImageElement","src","DragDropConfig","onDragStartClass","onDragEnterClass","onDragOverClass","onSortableDragClass","dragEffect","dropEffect","dragCursor","defaultCursor","DragDropData","DragDropRevertData","exports","allowedDropZones","__decorate","Injectable","_config","revertData","Object","defineProperty","prototype","get","_elem","markSortable","elem","classList","remove","add","__metadata","AbstractComponent","elemRef","_dragDropService","_cdr","_this","_dragEnabled","dropEnabled","dropZones","cloneItem","_defaultCursor","nativeElement","style","cursor","ondragenter","event","_onDragEnter","ondragover","_onDragOver","dataTransfer","ondragleave","_onDragLeave","ondrop","_onDrop","onmousedown","_target","target","ondragstart","_dragHandle","contains","_onDragStart","setData","effectAllowed","dragImage","setDragImage","img","createImage","isFunction","fun","callFun","_dragHelper","cloneNode","position","top","left","parentElement","appendChild","offsetX","offsetY","cursorelem","effectCursor","preventDefault","ondragend","removeChild","_onDragEnd","set","enabled","draggable","setDragHandle","detectChanges","setTimeout","destroyed","_isDropAllowed","_onDragEnterCallback","_onDragOverCallback","_onDragLeaveCallback","_preventAndStop","_onDropCallback","isDragged","files","allowDrop","dragData","length","i","dragZone","indexOf","stopPropagation","_onDragStartCallback","_onDragEndCallback","ElementRef","ChangeDetectorRef","AbstractHandleComponent","_Component","DraggableComponent","_super","dragDropService","cdr","call","onDragStart","EventEmitter","onDragEnd","onDragSuccessCallback","dragEnabled","__extends","value","emit","mouseEvent","Input","Output","Array","Directive","selector","DraggableHandleComponent","DroppableComponent","onDropSuccess","onDragEnter","onDragOver","onDragLeave","SortableContainer","_sortableDataService","keepOnDrop","enableDrop","maxContainerSize","onItemAddedCallback","_sortableData","sortableData","FormArray","sortableHandler","SortableFormArrayHandler","SortableArrayHandler","isHoverValid","sortableSource","item","sortableContainer","getItemAt","index","finalContainerRef","finalContainerItemsCopy","assign","removeItemAt","insertItemAt","replaceItems","splice","itemIndex","at","controls","removeAt","insert","SortableComponent","_sortableContainer","onDragStartCallback","onDragOverCallback","onDragEndCallback","onDropSuccessCallback","initialContainerRef","initialContainerItemsCopy","resetChanges","SortableHandleComponent","providers","provide","useFactory","deps","DndModule","DndModule_1","forRoot","ngModule","NgModule","declarations"],"mappings":"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"}
